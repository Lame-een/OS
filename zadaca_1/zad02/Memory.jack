/**
 * Memory operations library.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    //static int heapTop = 2048;
    //static int heapBottom = 16384;
    
    /** Initializes memory parameters. */
    function void init() {
        let ram = 0;
        
        // set heap and free list to 2048 (heap top)
        let heap = 2048;
        let freeList = 2048;
        
        // initial values
        let freeList[0] = 0;  // no next block at start
        let freeList[1] = 14334; // initial block length, 16384 - 2048 - 1
        
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int curr, next, len;
        var bool defragged;

        let curr = freeList;
        
        while(true){
            // iterate through all blocks
            while (~(curr = 0))
            {
                // next free block
                let next = ram[curr];

                // length of current block
                let len = ram[curr + 1];

                // check if current block is large enough
                if (~(len < size))
                {
                    // the block is large enough, use it (first fit) 

                    // update length of old block
                    let ram[curr + 1] = len - size - 2;

                    // start of the new segment
                    let curr = curr + len - size;

                    // set the new size
                    let ram[curr + 1] = size;

                    // return 
                    return curr + 2;
                }            

                let curr = next;
            }

            if (~defragged){
                do Memory.defrag();
                let defragged = true;
            }else{
                return freeList;
            }
        }


        return freeList;
    }    
    
    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int curr;

        // go back two places
        let curr = object - 2;
        
        // set next free block
        let ram[curr] = freeList;
        
        // move pointer 
        let freeList = curr;
        
        return;
    }

    function void memcpy(int src, int dest, int size)
    {
        var int i;

        while (i < size){

            let ram[dest + i] = ram[src + i];

            let i = i + 1;
        }

        return;
    }

    function void defrag()
    {
        var int curr, next;
        var bool firstPass, unchanged;

        while(~unchanged){
            let unchanged = true;

            let firstPass = true;
            let curr = freeList;
            let next = ram[curr];

            while (~(next = 0))
            {
                if ((curr + ram[curr + 1] + 2) = next)
                {
                    let ram[curr + 1] = ram[curr + 1] + ram[next + 1] + 2;
                    let ram[curr] = ram[next];

                    let ram[next] = 0;
                    let ram[next + 1] = 0;

                    if (firstPass){
                        let freeList = curr;
                    }

                    let unchanged = false;
                }
                else{
                    if ((next + ram[next + 1] + 2) = curr)
                    {
                        let ram[next + 1] = ram[next + 1] + ram[curr + 1] + 2;

                        let ram[curr] = 0;
                        let ram[curr + 1] = 0;

                        if (firstPass){
                            let freeList = next;
                        }
                        let unchanged = false;
                    }
                    else{
                        let firstPass = false;
                    }
                }

                let curr = next;
                let next = ram[curr];
            }
        }

        return;
    }
}















